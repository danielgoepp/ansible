---
- name: Upgrade VictoriaMetrics CRDs using local manifests
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/common.yml
  vars:
    service_name: "victoriametrics"
    service_namespace: "victoriametrics"
    manifests:
      - name: "vmsingle and vmagent (main)"
        path: "{{ k3s_config_base_path }}/victoriametrics/manifests/victoriametrics-values-prod-vmsingle.yaml"
        deployments:
          - name: "vmsingle-vms-prod"
            app_label: "vmsingle"
          - name: "vmagent-vma-prod"
            app_label: "vmagent"
      - name: "vmsingle long-term"
        path: "{{ k3s_config_base_path }}/victoriametrics/manifests/victoriametrics-values-prod-vmsingle-lt.yaml"
        deployments:
          - name: "vmsingle-vms-prod-lt"
            app_label: "vmsingle"

  tasks:
    - name: Display upgrade parameters
      debug:
        msg:
          - "VictoriaMetrics CRD Upgrade Parameters:"
          - "  Service: {{ service_name }}"
          - "  Kubernetes Context: {{ k3s_default_context }}"
          - "  Namespace: {{ service_namespace }}"
          - "  Manifests to apply: {{ manifests | length }}"

    - name: Verify all manifest files exist
      stat:
        path: "{{ item.path }}"
      register: manifest_files
      failed_when: not manifest_files.stat.exists
      loop: "{{ manifests }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Get current deployments status (before upgrade)
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item.1.name }}"
        namespace: "{{ service_namespace }}"
        context: "{{ k3s_default_context }}"
      register: current_deployments
      ignore_errors: true
      loop: "{{ manifests | subelements('deployments') }}"
      loop_control:
        label: "{{ item.1.name }}"

    - name: Display current deployment status
      debug:
        msg:
          - "Current {{ item.item.1.name }} Deployment:"
          - "  Name: {{ item.resources[0].metadata.name | default('Not found') }}"
          - "  Image: {{ item.resources[0].spec.template.spec.containers[0].image | default('Unknown') }}"
          - "  Ready Replicas: {{ item.resources[0].status.readyReplicas | default(0) }}/{{ item.resources[0].status.replicas | default(0) }}"
          - "  Status: {{ item.resources[0].status.conditions[-1].type | default('Unknown') if item.resources[0].status.conditions is defined else 'Unknown' }}"
      when: item.resources is defined and item.resources | length > 0
      loop: "{{ current_deployments.results }}"
      loop_control:
        label: "{{ item.item.1.name }}"

    - name: Validate manifests with kubectl (dry-run)
      shell: kubectl apply -f "{{ item.path }}" --context="{{ k3s_default_context }}" --dry-run=server --validate=true
      register: kubectl_validate_results
      failed_when: kubectl_validate_results.rc != 0
      loop: "{{ manifests }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Apply manifests from local files (server-side)
      kubernetes.core.k8s:
        state: present
        src: "{{ item.path }}"
        context: "{{ k3s_default_context }}"
        server_side_apply:
          field_manager: "ansible-{{ service_name }}-upgrade"
      register: apply_results
      failed_when: apply_results.failed | default(false)
      loop: "{{ manifests }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Display manifest validation and application results
      debug:
        msg:
          - "{{ item.item.name }} manifest validation and application:"
          - "  Kubectl validation: {{ 'SUCCESS' if kubectl_validate_results.results[ansible_loop.index0].rc == 0 else 'FAILED' }}"
          - "  Kubectl error: {{ kubectl_validate_results.results[ansible_loop.index0].stderr | default('None') }}"
          - "  Ansible result: {{ 'SUCCESS' if not (item.failed | default(false)) else 'FAILED' }}"
          - "  Changed: {{ item.changed }}"
          - "  Error: {{ item.msg | default('None') }}"
      loop: "{{ apply_results.results }}"
      loop_control:
        label: "{{ item.item.name }}"
        extended: true

    - name: Wait for manifest applications to complete
      pause:
        seconds: 10

    - name: Wait for all deployments to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item.1.name }}"
        namespace: "{{ service_namespace }}"
        context: "{{ k3s_default_context }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      register: deployments_ready
      loop: "{{ manifests | subelements('deployments') }}"
      loop_control:
        label: "{{ item.1.name }}"

    - name: Get updated deployments status (after upgrade)
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item.1.name }}"
        namespace: "{{ service_namespace }}"
        context: "{{ k3s_default_context }}"
      register: updated_deployments
      loop: "{{ manifests | subelements('deployments') }}"
      loop_control:
        label: "{{ item.1.name }}"

    - name: Display updated deployment status
      debug:
        msg:
          - "Updated {{ item.item.1.name }} Deployment:"
          - "  Name: {{ item.resources[0].metadata.name }}"
          - "  Image: {{ item.resources[0].spec.template.spec.containers[0].image }}"
          - "  Ready Replicas: {{ item.resources[0].status.readyReplicas }}/{{ item.resources[0].status.replicas }}"
          - "  Status: {{ item.resources[0].status.conditions[-1].type }}"
      loop: "{{ updated_deployments.results }}"
      loop_control:
        label: "{{ item.item.1.name }}"

    - name: Extract version information from container images
      set_fact:
        deployment_versions: "{{ deployment_versions | default([]) + [{'name': item.item.1.name, 'previous': prev_image, 'current': curr_image}] }}"
      vars:
        prev_image: "{{ (current_deployments.results | selectattr('item.1.name', 'equalto', item.item.1.name) | first).resources[0].spec.template.spec.containers[0].image | default('Unknown') }}"
        curr_image: "{{ item.resources[0].spec.template.spec.containers[0].image }}"
      loop: "{{ updated_deployments.results }}"
      loop_control:
        label: "{{ item.item.1.name }}"

    - name: Display upgrade summary
      debug:
        msg:
          - "VictoriaMetrics CRD upgrade completed successfully!"
          - "Deployments upgraded:"
          - "{% for dep in deployment_versions %}  {{ dep.name }}: {{ dep.previous }} -> {{ dep.current }}{% endfor %}"
          - "Manifests applied: {{ apply_results.results | selectattr('changed', 'equalto', true) | list | length }}/{{ manifests | length }}"
          - "All deployments ready: {{ (deployments_ready.results | length) == (manifests | subelements('deployments') | list | length) }}"