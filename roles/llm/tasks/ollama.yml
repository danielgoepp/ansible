---
# Ollama installation and upgrade tasks
# Handles both initial installation and upgrades using the official install script

- name: Check if Ollama is installed
  ansible.builtin.command: ollama --version
  register: ollama_current_version
  changed_when: false
  failed_when: false

- name: Display current Ollama version
  ansible.builtin.debug:
    msg: "{{ 'Current Ollama version: ' + ollama_current_version.stdout if ollama_current_version.rc == 0 else 'Ollama not installed - will install' }}"

- name: Download and run Ollama install script
  ansible.builtin.shell: curl -fsSL https://ollama.com/install.sh | sh
  register: ollama_install_result
  changed_when: "'Ollama is now installed' in ollama_install_result.stdout or 'Installing ollama' in ollama_install_result.stdout"

- name: Get installed Ollama version
  ansible.builtin.command: ollama --version
  register: ollama_new_version
  changed_when: false

- name: Display installed Ollama version
  ansible.builtin.debug:
    msg: "Ollama version: {{ ollama_new_version.stdout }}"

- name: Ensure Ollama service directory exists
  ansible.builtin.file:
    path: /etc/systemd/system/ollama.service.d
    state: directory
    mode: '0755'

- name: Configure Ollama environment variables
  ansible.builtin.template:
    src: ollama-override.conf.j2
    dest: /etc/systemd/system/ollama.service.d/override.conf
    mode: '0644'
  notify:
    - Reload systemd daemon
    - Restart Ollama service

- name: Ensure Ollama service is enabled and started
  ansible.builtin.systemd:
    name: ollama
    enabled: true
    state: started

- name: Wait for Ollama service to be ready
  ansible.builtin.uri:
    url: "http://{{ ollama_bind_address }}:{{ ollama_port }}/api/version"
    method: GET
    status_code: [200]
  retries: 30
  delay: 2
  delegate_to: "{{ inventory_hostname }}"
