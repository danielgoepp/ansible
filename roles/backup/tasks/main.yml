---
# Set backup credentials from AWX or vault
- name: Set backup credentials from AWX or vault
  ansible.builtin.set_fact:
    backup_opnsense_key: "{{ awx_opnsense_key | default(opnsense_key | default('')) }}"
    backup_opnsense_secret: "{{ awx_opnsense_secret | default(opnsense_secret | default('')) }}"
    backup_opnsense_host: "{{ awx_opnsense_host | default(opnsense_host | default('')) }}"
    backup_jira_site: "{{ awx_jira_site | default(jira_site | default('')) }}"
    backup_jira_username: "{{ awx_jira_username | default(jira_username | default('')) }}"
    backup_jira_token: "{{ awx_jira_token | default(jira_token | default('')) }}"


# Validate required credentials
- name: Validate OPNsense credentials are present
  ansible.builtin.fail:
    msg: "OPNsense credentials are required but not provided. Ensure opnsense_key and opnsense_secret are defined in vault or AWX credentials."
  when: backup_opnsense_key == '' or backup_opnsense_secret == ''

- name: Validate Jira credentials are present
  ansible.builtin.fail:
    msg: "Jira credentials are required but not provided. Ensure jira_site, jira_username, and jira_token are defined in vault or AWX credentials."
  when: backup_jira_site == '' or backup_jira_username == '' or backup_jira_token == ''

# Create backup directories
- name: Create backup directories
  ansible.builtin.file:
    path: "/mnt/backups/{{ item }}"
    state: directory
    owner: root
    group: sudo
    mode: '0775'
  loop: "{{ backup_directories }}"

# Setup SSH key for backup access to other servers
- name: Create .ssh directory for root
  ansible.builtin.file:
    path: /root/.ssh
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Install SSH private key for root (local execution)
  ansible.builtin.copy:
    src: "~/.ssh/id_rsa"
    dest: /root/.ssh/id_rsa
    owner: root
    group: root
    mode: '0600'
    remote_src: false
  when: awx_job_id is not defined

- name: Debug AWX SSH credential variables (AWX execution)
  ansible.builtin.debug:
    msg:
      - "awx_job_id: {{ awx_job_id | default('NOT_DEFINED') }}"
      - "ansible_ssh_private_key_file: {{ ansible_ssh_private_key_file | default('NOT_DEFINED') }}"
      - "ansible_ssh_private_key: {{ ansible_ssh_private_key | default('NOT_DEFINED') }}"
      - "ansible_private_key_file: {{ ansible_private_key_file | default('NOT_DEFINED') }}"
      - "Available environment variables starting with SSH:"
      - "{{ ansible_env.keys() | select('match', '^SSH.*') | list }}"
      - "Available environment variables starting with ANSIBLE:"
      - "{{ ansible_env.keys() | select('match', '^ANSIBLE.*') | list }}"
  when: awx_job_id is defined

- name: Set SSH private key from AWX machine credential - content method (AWX execution)
  ansible.builtin.copy:
    content: "{{ ansible_ssh_private_key }}"
    dest: /root/.ssh/id_rsa
    owner: root
    group: root
    mode: '0600'
  when:
    - awx_job_id is defined
    - ansible_ssh_private_key is defined
    - ansible_ssh_private_key != ''

- name: Set SSH private key from AWX machine credential - file method (AWX execution)
  ansible.builtin.copy:
    src: "{{ ansible_ssh_private_key_file }}"
    dest: /root/.ssh/id_rsa
    owner: root
    group: root
    mode: '0600'
    remote_src: true
  when:
    - awx_job_id is defined
    - ansible_ssh_private_key_file is defined
    - ansible_ssh_private_key_file != ''
    - ansible_ssh_private_key is not defined or ansible_ssh_private_key == ''

- name: Check for AWX SSH key in environment variable (AWX execution)
  ansible.builtin.copy:
    src: "{{ ansible_env.ANSIBLE_PRIVATE_KEY_FILE }}"
    dest: /root/.ssh/id_rsa
    owner: root
    group: root
    mode: '0600'
    remote_src: true
  when:
    - awx_job_id is defined
    - ansible_env.ANSIBLE_PRIVATE_KEY_FILE is defined
    - ansible_env.ANSIBLE_PRIVATE_KEY_FILE != ''
    - ansible_ssh_private_key is not defined or ansible_ssh_private_key == ''
    - ansible_ssh_private_key_file is not defined or ansible_ssh_private_key_file == ''

# Install backup script - main
- name: Copy backup script
  ansible.builtin.template:
    src: backups.sh.j2
    dest: /usr/local/bin/backups.sh
    owner: root
    group: root
    mode: '0755'

# Install backup script - jira
- name: Copy jira backup script
  ansible.builtin.template:
    src: jira_backup.py.j2
    dest: /usr/local/bin/jira_backup.py
    owner: root
    group: root
    mode: '0755'

# Install victoria metrics utilities
- name: Download victoria metrics utilities
  ansible.builtin.get_url:
    url: "{{ backup_vmutils_download_url }}"
    dest: "/usr/local/src/{{ backup_vmutils_filename }}"
    mode: '0644'

- name: Extract victoria metrics utilities
  ansible.builtin.unarchive:
    src: "/usr/local/src/{{ backup_vmutils_filename }}"
    dest: /usr/local/bin/
    creates: /usr/local/bin/vmbackup-prod
    remote_src: true

# Cron main backups script
- name: Cron main backup
  ansible.builtin.cron:
    name: main backup
    hour: "{{ backup_main_hour }}"
    minute: "{{ backup_main_minute }}"
    job: '/usr/local/bin/backups.sh'

# Cron jira backup script
- name: Cron jira backup
  ansible.builtin.cron:
    name: jira backup
    hour: "{{ backup_jira_hour }}"
    minute: "{{ backup_jira_minute }}"
    weekday: "{{ backup_jira_weekday }}"
    job: '/usr/bin/python3 /usr/local/bin/jira_backup.py'
