---
# Reusable task file for upgrading ESPHome devices
# Required variables:
#   - devices_to_upgrade: List of devices to upgrade
#   - upgrade_description: Description for logging (optional, defaults to "ESPHome devices")

- name: Set default upgrade description
  set_fact:
    upgrade_description: "ESPHome devices"
  when: upgrade_description is not defined

- name: Validate devices are provided
  fail:
    msg: "No devices provided for upgrade (devices_to_upgrade is empty or undefined)"
  when: devices_to_upgrade is not defined or devices_to_upgrade | length == 0

- name: Get ESPHome pod name
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ esphome_namespace }}"
    label_selectors:
      - "app={{ esphome_deployment_name }}"
    context: "{{ k3s_context }}"
  register: esphome_pods

- name: Validate ESPHome pod exists
  fail:
    msg: "ESPHome pod not found in namespace {{ esphome_namespace }}"
  when: esphome_pods.resources | length == 0

- name: Validate ESPHome pod is running
  fail:
    msg: "ESPHome pod is not running (status: {{ esphome_pods.resources[0].status.phase }})"
  when:
    - esphome_pods.resources | length > 0
    - esphome_pods.resources[0].status.phase != "Running"

- name: Set ESPHome pod name
  set_fact:
    esphome_pod_name: "{{ esphome_pods.resources[0].metadata.name }}"

- name: Display upgrade plan header
  debug:
    msg: "{{ upgrade_description }} Upgrade Plan:"

- name: Display upgrade plan details
  debug:
    msg: "Pod: {{ esphome_pod_name }} | Namespace: {{ esphome_namespace }} | Context: {{ k3s_context }} | Devices: {{ devices_to_upgrade | length }}"

- name: List devices to upgrade
  debug:
    msg: "- {{ item.name }} ({{ item.config_file }}.yaml)"
  loop: "{{ devices_to_upgrade }}"

- name: Clean build cache for devices (if requested)
  kubernetes.core.k8s_exec:
    namespace: "{{ esphome_namespace }}"
    pod: "{{ esphome_pod_name }}"
    command: "esphome clean {{ item.config_file | default(item.name) }}.yaml"
    context: "{{ k3s_context }}"
  loop: "{{ devices_to_upgrade }}"
  loop_control:
    label: "{{ item.name }}"
  when: esphome_clean_build | default(true)
  failed_when: false  # Don't fail if clean fails

- name: Delete build files for devices (if requested)
  kubernetes.core.k8s_exec:
    namespace: "{{ esphome_namespace }}"
    pod: "{{ esphome_pod_name }}"
    command: "rm -rf .esphome/build/{{ item.config_file | default(item.name) }}"
    context: "{{ k3s_context }}"
  loop: "{{ devices_to_upgrade }}"
  loop_control:
    label: "{{ item.name }}"
  when: esphome_clean_build | default(true)
  failed_when: false  # Don't fail if rm fails

- name: Upgrade ESPHome devices
  kubernetes.core.k8s_exec:
    namespace: "{{ esphome_namespace }}"
    pod: "{{ esphome_pod_name }}"
    command: >
      esphome -q run {{ item.config_file | default(item.name) }}.yaml
      {% if esphome_no_logs | default(true) %}--no-logs{% endif %}
    context: "{{ k3s_context }}"
  register: esphome_upgrade_result
  loop: "{{ devices_to_upgrade }}"
  loop_control:
    label: "{{ item.name }}"
  failed_when: false  # Don't fail the entire playbook if one device fails
  timeout: "{{ esphome_timeout | default(600) }}"

- name: Display upgrade results
  debug:
    msg: "Device: {{ item.item.name }} | Config: {{ item.item.config_file | default(item.item.name) }}.yaml | Success: {{ item.rc == 0 }}{% if item.rc != 0 %} | Error: {{ (item.stderr | default('Unknown error') | trim | regex_replace('\n.*', '') | truncate(80)) }}{% endif %}"
  loop: "{{ esphome_upgrade_result.results }}"
  loop_control:
    label: "{{ item.item.name }}"

- name: Summary of upgrade results
  debug:
    msg: "{{ upgrade_description }} Upgrade Summary: {{ devices_to_upgrade | length }} total, {{ esphome_upgrade_result.results | selectattr('rc', 'equalto', 0) | list | length }} successful, {{ esphome_upgrade_result.results | rejectattr('rc', 'equalto', 0) | list | length }} failed"

- name: Failed device details
  debug:
    msg: "Failed: {{ item.item.name }} - {{ (item.stderr | default('No error details available') | trim | regex_replace('\n.*', '')) }}"
  loop: "{{ esphome_upgrade_result.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.rc != 0