---
# Cluster Alerts Management
# Mutes/unmutes alerts across all monitoring systems using native Ansible
#
# Parameters:
#   maintenance_action: "enable" or "disable"
#   graylog_enabled: true/false (default: true) - manage Graylog alerts
#   alertmanager_enabled: true/false (default: true) - manage Alertmanager
#   hertzbeat_enabled: true/false (default: true) - manage HerzBeat silences
#   maintenance_duration_hours: int (default: 2) - duration for alert silences

- name: Set default maintenance parameters
  ansible.builtin.set_fact:
    graylog_enabled: "{{ graylog_enabled | default(true) }}"
    alertmanager_enabled: "{{ alertmanager_enabled | default(true) }}"
    hertzbeat_enabled: "{{ hertzbeat_enabled | default(true) }}"
    maintenance_duration_hours: "{{ maintenance_duration_hours | default(2) }}"

- name: Validate maintenance_action parameter
  ansible.builtin.fail:
    msg: "maintenance_action must be 'enable' or 'disable'"
  when: maintenance_action not in ['enable', 'disable']

- name: Set credentials from AWX or vault
  ansible.builtin.set_fact:
    graylog_api_url: "{{ awx_graylog_api_url | default(vault_graylog_api_url | default('')) }}"
    graylog_username: "{{ awx_graylog_username | default(vault_graylog_username | default('')) }}"
    graylog_password: "{{ awx_graylog_password | default(vault_graylog_password | default('')) }}"
    alertmanager_api_url: "{{ awx_alertmanager_api_url | default(vault_alertmanager_api_url | default('')) }}"
    alertmanager_created_by: "{{ awx_alertmanager_created_by | default(vault_alertmanager_created_by | default('ansible-automation')) }}"
    hertzbeat_url: "{{ awx_hertzbeat_url | default(vault_hertzbeat_url | default('')) }}"
    hertzbeat_token: "{{ awx_hertzbeat_token | default(vault_hertzbeat_token | default('')) }}"

# ENABLE MAINTENANCE MODE
- name: Enable maintenance mode
  when: maintenance_action == 'enable'
  block:
    # === GRAYLOG ===
    - name: Fetch Graylog event definitions
      ansible.builtin.uri:
        url: "{{ graylog_api_url }}/events/definitions"
        method: GET
        user: "{{ graylog_username }}"
        password: "{{ graylog_password }}"
        force_basic_auth: true
        return_content: true
      register: graylog_events
      when: graylog_enabled | bool
      failed_when: false

    - name: Save list of already-disabled Graylog events
      ansible.builtin.copy:
        content: |
          {% for event in graylog_events.json.event_definitions | default([]) %}
          {% if event.state == "DISABLED" %}
          {{ event.id }}
          {% endif %}
          {% endfor %}
        dest: /tmp/graylog_previously_disabled.txt
        mode: '0600'
      when:
        - graylog_enabled | bool
        - graylog_events is succeeded
        - graylog_events.json.event_definitions is defined

    - name: Mute Graylog event definitions
      ansible.builtin.uri:
        url: "{{ graylog_api_url }}/events/definitions/{{ item.id }}/unschedule"
        method: PUT
        user: "{{ graylog_username }}"
        password: "{{ graylog_password }}"
        force_basic_auth: true
        headers:
          X-Requested-By: "ansible-script"
        status_code: [200, 201]
      loop: "{{ graylog_events.json.event_definitions | default([]) }}"
      when:
        - graylog_enabled | bool
        - graylog_events is succeeded
        - item.state != "DISABLED"
        - item._scope | default('') != "SYSTEM_NOTIFICATION_EVENT"
      register: graylog_mute_results
      failed_when: false

    - name: Display Graylog mute summary
      ansible.builtin.debug:
        msg: "Muted {{ graylog_mute_results.results | selectattr('changed', 'equalto', true) | list | length }} Graylog event(s)"
      when:
        - graylog_enabled | bool
        - graylog_mute_results is defined

    # === ALERTMANAGER ===
    - name: Create Alertmanager silence
      ansible.builtin.uri:
        url: "{{ alertmanager_api_url }}/silences"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          matchers:
            - name: "grafana_folder"
              value: "Goepp Alerts"
              isRegex: false
              isEqual: true
          startsAt: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
          endsAt: "{{ lookup('pipe', 'date -u -v +' + (maintenance_duration_hours | string) + 'H +%Y-%m-%dT%H:%M:%SZ') }}"
          createdBy: "{{ alertmanager_created_by }}"
          comment: "Maintenance window"
        status_code: [200, 201]
      register: alertmanager_silence
      when: alertmanager_enabled | bool
      failed_when: false

    - name: Display Alertmanager silence ID
      ansible.builtin.debug:
        msg: "Alertmanager silence created: {{ alertmanager_silence.json.silenceID | default('unknown') }}"
      when:
        - alertmanager_enabled | bool
        - alertmanager_silence is succeeded

    # === HERTZBEAT ===
    - name: Get current timestamp for HertzBeat
      ansible.builtin.set_fact:
        hertzbeat_start_time: "{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S.%3N%:z') }}"
        hertzbeat_end_time: "{{ lookup('pipe', 'date -v +' + (maintenance_duration_hours | string) + 'H +%Y-%m-%dT%H:%M:%S.%3N%:z') }}"
      when: hertzbeat_enabled | bool

    - name: Create HertzBeat silence
      ansible.builtin.uri:
        url: "{{ hertzbeat_url }}/api/alert/silence"
        method: POST
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
          Authorization: "Bearer {{ hertzbeat_token }}"
        body_format: json
        body:
          type: 0
          name: "Maintenance Window - {{ lookup('pipe', 'date +%Y-%m-%d_%H:%M') }}"
          enable: true
          periodStart: "{{ hertzbeat_start_time }}"
          periodEnd: "{{ hertzbeat_end_time }}"
          matchAll: true
        status_code: [200, 201]
      register: hertzbeat_silence
      when: hertzbeat_enabled | bool
      failed_when: false

    - name: Display HertzBeat silence status
      ansible.builtin.debug:
        msg: "HertzBeat silence created for {{ maintenance_duration_hours }} hours"
      when:
        - hertzbeat_enabled | bool
        - hertzbeat_silence is succeeded

    - name: Display maintenance mode status
      ansible.builtin.debug:
        msg: "Maintenance mode enabled - alerts muted, monitoring silenced for {{ maintenance_duration_hours }} hours"

# DISABLE MAINTENANCE MODE
- name: Disable maintenance mode
  when: maintenance_action == 'disable'
  block:
    # === GRAYLOG ===
    - name: Read previously disabled Graylog events
      ansible.builtin.slurp:
        src: /tmp/graylog_previously_disabled.txt
      register: graylog_previously_disabled_file
      when: graylog_enabled | bool
      failed_when: false

    - name: Parse previously disabled event IDs
      ansible.builtin.set_fact:
        graylog_previously_disabled_ids: "{{ (graylog_previously_disabled_file.content | b64decode).split('\n') | select() | list }}"
      when:
        - graylog_enabled | bool
        - graylog_previously_disabled_file is succeeded

    - name: Fetch Graylog event definitions for unmute
      ansible.builtin.uri:
        url: "{{ graylog_api_url }}/events/definitions"
        method: GET
        user: "{{ graylog_username }}"
        password: "{{ graylog_password }}"
        force_basic_auth: true
        return_content: true
      register: graylog_events_unmute
      when: graylog_enabled | bool
      failed_when: false

    - name: Unmute Graylog event definitions
      ansible.builtin.uri:
        url: "{{ graylog_api_url }}/events/definitions/{{ item.id }}/schedule"
        method: PUT
        user: "{{ graylog_username }}"
        password: "{{ graylog_password }}"
        force_basic_auth: true
        headers:
          X-Requested-By: "ansible-script"
        status_code: [200, 201]
      loop: "{{ graylog_events_unmute.json.event_definitions | default([]) }}"
      when:
        - graylog_enabled | bool
        - graylog_events_unmute is succeeded
        - item.id not in (graylog_previously_disabled_ids | default([]))
        - item._scope | default('') != "SYSTEM_NOTIFICATION_EVENT"
      register: graylog_unmute_results
      failed_when: false

    - name: Display Graylog unmute summary
      ansible.builtin.debug:
        msg: "Unmuted {{ graylog_unmute_results.results | selectattr('changed', 'equalto', true) | list | length }} Graylog event(s)"
      when:
        - graylog_enabled | bool
        - graylog_unmute_results is defined

    - name: Remove Graylog state file
      ansible.builtin.file:
        path: /tmp/graylog_previously_disabled.txt
        state: absent
      when: graylog_enabled | bool

    # === ALERTMANAGER ===
    - name: Get all Alertmanager silences
      ansible.builtin.uri:
        url: "{{ alertmanager_api_url }}/silences"
        method: GET
        headers:
          Content-Type: "application/json"
        return_content: true
      register: alertmanager_silences
      when: alertmanager_enabled | bool
      failed_when: false

    - name: Delete active Alertmanager silences
      ansible.builtin.uri:
        url: "{{ alertmanager_api_url }}/silence/{{ item.id }}"
        method: DELETE
        headers:
          Content-Type: "application/json"
        status_code: [200, 204]
      loop: "{{ alertmanager_silences.json | default([]) }}"
      when:
        - alertmanager_enabled | bool
        - alertmanager_silences is succeeded
        - item.status.state == "active"
      register: alertmanager_delete_results
      failed_when: false

    - name: Display Alertmanager unmute summary
      ansible.builtin.debug:
        msg: "Removed {{ alertmanager_delete_results.results | selectattr('changed', 'equalto', true) | list | length }} Alertmanager silence(s)"
      when:
        - alertmanager_enabled | bool
        - alertmanager_delete_results is defined

    # === HERTZBEAT ===
    - name: Get all HertzBeat silences
      ansible.builtin.uri:
        url: "{{ hertzbeat_url }}/api/alert/silences"
        method: GET
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
          Authorization: "Bearer {{ hertzbeat_token }}"
        return_content: true
      register: hertzbeat_silences
      when: hertzbeat_enabled | bool
      failed_when: false

    - name: Delete HertzBeat silences
      ansible.builtin.uri:
        url: "{{ hertzbeat_url }}/api/alert/silences?ids={{ item.id }}"
        method: DELETE
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
          Authorization: "Bearer {{ hertzbeat_token }}"
        status_code: [200, 204]
      loop: "{{ hertzbeat_silences.json.data.content | default([]) }}"
      when:
        - hertzbeat_enabled | bool
        - hertzbeat_silences is succeeded
        - hertzbeat_silences.json.data.content is defined
      register: hertzbeat_delete_results
      failed_when: false

    - name: Display HertzBeat unmute summary
      ansible.builtin.debug:
        msg: "Removed {{ hertzbeat_delete_results.results | selectattr('changed', 'equalto', true) | list | length }} HertzBeat silence(s)"
      when:
        - hertzbeat_enabled | bool
        - hertzbeat_delete_results is defined

    - name: Display maintenance mode disabled
      ansible.builtin.debug:
        msg: "Maintenance mode disabled - monitoring and alerts restored"
