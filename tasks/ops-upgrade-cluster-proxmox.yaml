---
# Proxmox Node Upgrade Operations
# Safely upgrades a Proxmox VE node including package updates and reboot if needed
#
# Parameters:
#   pve_user: Proxmox user (default: root)
#   wait_timeout: timeout for wait operations in seconds (default: 600)
#   reboot_wait: time to wait after reboot in seconds (default: 60)

- name: Set default Proxmox parameters
  set_fact:
    pve_user: "{{ pve_user | default('root') }}"
    wait_timeout: "{{ wait_timeout | default(600) }}"
    reboot_wait: "{{ reboot_wait | default(60) }}"

- name: Display current Proxmox node being processed
  debug:
    msg: "=== Processing Proxmox node {{ inventory_hostname }} ==="

- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 0

- name: Check for available upgrades
  shell: apt list --upgradable 2>/dev/null | grep -v "WARNING" | wc -l
  register: upgrades_available
  changed_when: false

- name: Display upgrade count
  debug:
    msg: "{{ upgrades_available.stdout }} packages available for upgrade on {{ inventory_hostname }}"

- name: Upgrade all packages
  apt:
    upgrade: dist
    autoclean: yes
    autoremove: yes
  register: apt_upgrade_result
  when: upgrades_available.stdout | int > 0

- name: Display upgrade results
  debug:
    var: apt_upgrade_result.stdout_lines
  when: apt_upgrade_result is defined and apt_upgrade_result.stdout_lines is defined

- name: Reboot Proxmox node
  reboot:
    reboot_timeout: "{{ wait_timeout }}"
    post_reboot_delay: "{{ reboot_wait }}"
    msg: "Rebooting {{ inventory_hostname }} after package upgrades"

- name: Wait for node to come back online after reboot
  wait_for_connection:
    connect_timeout: 10
    delay: 30
    sleep: 10
    timeout: "{{ wait_timeout }}"

- name: Wait for system to stabilize after reboot
  pause:
    seconds: 30

- name: Wait for Proxmox services to be ready
  systemd:
    name: "{{ item }}"
    state: started
  loop:
    - pveproxy
    - pvedaemon
    - pvestatd
  register: pve_services

- name: Check Proxmox cluster status
  command: pvecm status
  register: cluster_status
  failed_when: false

- name: Display Proxmox cluster status
  debug:
    var: cluster_status.stdout_lines
  when: cluster_status.rc == 0

- name: Check Ceph status on this node
  command: ceph status
  register: ceph_status
  failed_when: false

- name: Display initial Ceph status
  debug:
    var: ceph_status.stdout_lines
  when: ceph_status.rc == 0

- name: Wait for Ceph cluster to be healthy
  command: ceph health
  register: ceph_health_check
  until: ceph_health_check.stdout == "HEALTH_OK"
  retries: 60
  delay: 30
  failed_when: false
  when: ceph_status.rc == 0

- name: Display Ceph health wait result
  debug:
    msg: "Ceph health status: {{ ceph_health_check.stdout | default('Not available') }}"
  when: ceph_status.rc == 0

- name: Display Ceph health status message
  debug:
    msg: "{{ '✓ Ceph cluster is healthy - safe to proceed' if ceph_health_check.stdout == 'HEALTH_OK' else '⚠ Ceph cluster may need attention before proceeding' }}"
  when: ceph_status.rc == 0

- name: Get detailed Ceph status after health check
  command: ceph status
  register: ceph_final_status
  when: ceph_status.rc == 0

- name: Display final Ceph status
  debug:
    var: ceph_final_status.stdout_lines
  when: ceph_status.rc == 0 and ceph_final_status is defined

- name: Proxmox node upgrade completed
  debug:
    msg: "=== Proxmox node {{ inventory_hostname }} upgrade completed successfully ==="